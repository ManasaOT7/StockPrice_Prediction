# -*- coding: utf-8 -*-
"""Wise@RandomForest.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cg-I1yUE4wgVIeskUECbfxFfJeps1Av-
"""

!pip install opendatasets

!pip install pandas
!pip install Kaggle

import numpy as np
import pandas as pd
import zipfile
import os

os.environ['KAGGLE_USERNAME'] = "manasaneelapala"
os.environ['KAGGLE_KEY'] = "58f97f0eeb7871893ef90dccb88f755a"

!kaggle datasets download -d dgawlik/nyse -f prices.csv --force

#!mkdir ~/.kaggle
kaggle_dir = '/root/.kaggle'
if not os.path.exists(kaggle_dir):
    os.makedirs(kaggle_dir)
!echo '{"username":"manasaneelapala","key":"58f97f0eeb7871893ef90dccb88f755a"}' > /root/.kaggle/kaggle.json
!chmod 600 ~/.kaggle/kaggle.json

with zipfile.ZipFile('prices.csv.zip', 'r') as zip_ref:
    zip_ref.extractall('nyse_dataset')

dataset = pd.read_csv('nyse_dataset/prices.csv')

print(dataset.head())

from sklearn.impute import SimpleImputer

dataset.describe()

#Removing null values

imputer = SimpleImputer(missing_values=np.nan, strategy='mean')
columns_to_impute = ['open', 'close', 'low', 'high', 'volume']
dataset[columns_to_impute] = imputer.fit_transform(dataset[columns_to_impute])

#Correlation Matrix

import matplotlib.pyplot as plt
import seaborn as sns

correlation_matrix = dataset.corr()
plt.figure(figsize=(12, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Correlation Matrix')
plt.show()

plt.figure(figsize=(12, 8))
for i, (column, data) in enumerate(list(dataset.items())[2:], 1):
    plt.subplot(4, 2, i)
    sns.histplot(data, kde=True)
    plt.title(f'Histogram of {column}')

plt.tight_layout()
plt.show()

column_name = 'low'

plt.figure(figsize=(8, 6))

sns.boxplot(x=dataset[column_name], palette='Set2')

plt.title(f'Box Plot for {column_name}')
plt.show()

column_name = 'high'

plt.figure(figsize=(15, 6))

sns.boxplot(x=dataset[column_name], palette='Set2')

plt.title(f'Box Plot for {column_name}')
plt.show()

column_name = 'open'

plt.figure(figsize=(15, 6))

sns.boxplot(x=dataset[column_name], palette='Set2')

plt.title(f'Box Plot for {column_name}')
plt.show()

column_name = 'close'

plt.figure(figsize=(15, 6))

sns.boxplot(x=dataset[column_name], palette='Set2')

plt.title(f'Box Plot for {column_name}')
plt.show()

column_name = 'volume'

plt.figure(figsize=(15, 6))

sns.boxplot(x=dataset[column_name], palette='Set2')

plt.title(f'Box Plot for {column_name}')
plt.show()

numeric_columns = ['open', 'close', 'low', 'high', 'volume']

Q1 = dataset[numeric_columns].quantile(0.25)
Q3 = dataset[numeric_columns].quantile(0.75)
IQR = Q3 - Q1

outliers_mask = ((dataset[numeric_columns] < (Q1 - 1.5 * IQR)) | (dataset[numeric_columns] > (Q3 + 1.5 * IQR)))

outliers_count = outliers_mask.sum()

print(outliers_count)

numeric_columns = ['open', 'close', 'low', 'high', 'volume']
Q1 = dataset[numeric_columns].quantile(0.25)
Q3 = dataset[numeric_columns].quantile(0.75)
IQR = Q3 - Q1
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR

for column in numeric_columns:
    dataset[column] = np.clip(dataset[column], lower_bound[column], upper_bound[column])

numeric_columns = ['open', 'close', 'low', 'high', 'volume']

Q1 = dataset[numeric_columns].quantile(0.25)
Q3 = dataset[numeric_columns].quantile(0.75)
IQR = Q3 - Q1

outliers_mask = ((dataset[numeric_columns] < (Q1 - 1.5 * IQR)) | (dataset[numeric_columns] > (Q3 + 1.5 * IQR)))

outliers_count = outliers_mask.sum()

print(outliers_count)

column_name = 'low'

plt.figure(figsize=(8, 6))

sns.boxplot(x=dataset[column_name], palette='Set2')

plt.title(f'Box Plot for {column_name}')
plt.show()

column_name = 'high'

plt.figure(figsize=(8, 6))

sns.boxplot(x=dataset[column_name], palette='Set2')

plt.title(f'Box Plot for {column_name}')
plt.show()

column_name = 'open'

plt.figure(figsize=(8, 6))

sns.boxplot(x=dataset[column_name], palette='Set2')

plt.title(f'Box Plot for {column_name}')
plt.show()


column_name = 'close'

plt.figure(figsize=(8, 6))

sns.boxplot(x=dataset[column_name], palette='Set2')

plt.title(f'Box Plot for {column_name}')
plt.show()


column_name = 'volume'

plt.figure(figsize=(8, 6))

sns.boxplot(x=dataset[column_name], palette='Set2')

plt.title(f'Box Plot for {column_name}')
plt.show()

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

X = dataset[['open', 'high', 'low', 'volume']]
y = dataset['close']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train[['open', 'high', 'low', 'volume']])
X_test_scaled = scaler.transform(X_test[['open', 'high', 'low', 'volume']])

# Create Random Forest Regressor model
from sklearn.ensemble import RandomForestRegressor, RandomForestClassifier

random_forest_regressor = RandomForestRegressor(n_estimators=200, random_state=42)
random_forest_regressor.fit(X_train_scaled, y_train)

# Create Random Forest Classifier model
y_class = np.where(y > y.median(), 1, 0)  # Convert to binary classification
X_train_class, X_test_class, y_train_class, y_test_class = train_test_split(X, y_class, test_size=0.2, random_state=42)
random_forest_classifier = RandomForestClassifier(n_estimators=200, random_state=42)
random_forest_classifier.fit(X_train_class, y_train_class)

from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

# Predict using the models
y_pred_regressor = random_forest_regressor.predict(X_test_scaled)


r2_rf_test = r2_score(y_test,y_pred_regressor) * 100  # Convert to percentage
print(f'Random Forest Regressor - R-squared (Coefficient of Determination) for Test Data: {r2_rf_test:.2f}%')

y_pred_train_regressor = random_forest_regressor.predict(X_train_scaled)
r2_rf_train = r2_score(y_train, y_pred_train_regressor) * 100  # Convert to percentage
print(f'Random Forest Regressor - R-squared (Coefficient of Determination) for Training Data: {r2_rf_train:.2f}%')

# User input for prediction
while True:
    open_val = float(input("Enter open value: "))
    low_val = float(input("Enter low value: "))
    high_val = float(input("Enter high value: "))
    volume_val = float(input("Enter volume value: "))


    user_input = pd.DataFrame([[open_val, high_val, low_val, volume_val]], columns=['open', 'high', 'low', 'volume'])
    user_input_scaled = scaler.transform(user_input)

    predicted_close_regressor = random_forest_regressor.predict(user_input_scaled)
    print("Regressor - Predicted close value:", predicted_close_regressor[0])


    predicted_class = random_forest_classifier.predict(user_input)
    print("Classifier - Predicted class:", predicted_class[0])

    choice = input("Do you want to make another prediction? (y/n): ")
    if choice.lower() != 'y':
        break

from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score

y_pred_classifier = random_forest_classifier.predict(X_test_class)

# Calculate accuracy and convert to percentage with two decimal places
accuracy_cls = accuracy_score(y_test_class, y_pred_classifier) * 100
print(f'Classifier - Accuracy: {accuracy_cls:.2f}%')

# Calculate precision and convert to percentage with two decimal places
precision_cls = precision_score(y_test_class, y_pred_classifier) * 100
print(f'Classifier - Precision: {precision_cls:.2f}%')

# Calculate recall and convert to percentage with two decimal places
recall_cls = recall_score(y_test_class, y_pred_classifier) * 100
print(f'Classifier - Recall: {recall_cls:.2f}%')

# Calculate F1-score and convert to percentage with two decimal places
f1_cls = f1_score(y_test_class, y_pred_classifier) * 100
print(f'Classifier - F1-score: {f1_cls:.2f}%')

from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score

# Predict using the RandomForestClassifier model
y_train_pred_classifier = random_forest_classifier.predict(X_train_class)

# Calculate accuracy and convert to percentage with two decimal places
accuracy_cls = accuracy_score(y_train_class, y_train_pred_classifier) * 100
print(f'Classifier - Accuracy: {accuracy_cls:.2f}%')

# Calculate precision and convert to percentage with two decimal places
precision_cls = precision_score(y_train_class, y_train_pred_classifier) * 100
print(f'Classifier - Precision: {precision_cls:.2f}%')

# Calculate recall and convert to percentage with two decimal places
recall_cls = recall_score(y_train_class, y_train_pred_classifier) * 100
print(f'Classifier - Recall: {recall_cls:.2f}%')

# Calculate F1-score and convert to percentage with two decimal places
f1_cls = f1_score(y_train_class, y_train_pred_classifier) * 100
print(f'Classifier - F1-score: {f1_cls:.2f}%')